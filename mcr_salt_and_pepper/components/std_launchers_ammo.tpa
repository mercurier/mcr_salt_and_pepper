//// Standardize to hit and damage bonus from enchantment on launchers and ammo

OUTER_SET half_str_bonus = 1

COPY_EXISTING ~strmod.2da~ ~override~
  READ_2DA_ENTRIES_NOW ~strmod~ 5
BUT_ONLY

COPY_EXISTING_REGEXP GLOB ~.*\.itm$~ ~override~
  READ_SHORT 0x1c item_type
  READ_LONG  0x60 item_ench
  PATCH_IF (%SOURCE_SIZE% > 0x71) BEGIN
    // launchers bestow enchantment to ammo (this block was originally wrote by daniel.pennyway@gmail.com, https://forums.beamdog.com/discussion/58374/enchant-the-missile-launchers-ranged-weapon-tweak)
    PATCH_IF (item_type = 0x0f || item_type = 0x12 || item_type = 0x1b) BEGIN // double-check those values
      READ_LONG 0x60 enchantment
      PATCH_IF (enchantment > 0) BEGIN
        LPF ADD_ITEM_EQEFFECT
          INT_VAR opcode = 345 target = 1 timing = 2 parameter1 = EVAL enchantment special = 1
        END // double-check how this function works and which variables need to be set
      END
    END 
  
    // remove to hit and damage bonus from enchantment on ammo
    PATCH_IF (item_type = 0x05) OR (item_type = 0x0e) OR (item_type = 0x1f) BEGIN
      READ_SHORT 0x82 req_launcher_flag
      PATCH_IF req_launcher_flag != 0 BEGIN  // make sure it is a ammo ability
        WRITE_SHORT 0x86  0 // to hit bonus = enchantment level
        PATCH_IF item_type = 0x0e BEGIN // is bullet
          WRITE_SHORT 0x8c  1 // dmg bonus = enchantment level + 1
        END ELSE BEGIN
          WRITE_SHORT 0x8c  0 // dmg bonus = enchantment level
        END
      END
    END

    // standardize to hit and damage bonus from enchantment on slings 
    ELSE PATCH_IF item_type = 0x12 BEGIN
      READ_BYTE 0x72 ability_type
      PATCH_IF ability_type = 4 BEGIN  // make sure it is a launcher ability
        WRITE_SHORT 0x86  item_ench // to hit bonus = enchantment level
        WRITE_SHORT 0x8c  item_ench // dmg bonus = enchantment level
      END
    END
    
    // set to hit and damage bonus from enchantment on bows and xbows universally, per Item Revisions setting
    ELSE PATCH_IF (item_type = 0x0f) OR (item_type = 0x1b) BEGIN
      READ_BYTE 0x72 ability_type
      PATCH_IF ability_type = 4 BEGIN  // make sure it is a launcher ability
        READ_BYTE  0x20 thief_unusable
        SET is_long_heavy = ((thief_unusable BAND 0b01000000) > 0)  // is long bow or heavy xbow?
        READ_SHORT 0x26 strreq
        READ_2DA_ENTRY_FORMER ~strmod~ strreq 2 str_dmg  // row and col idx starts from 0
        SET str_dmg = (str_dmg * (str_dmg>0)) / (2*half_str_bonus)
        PATCH_IF item_type = 0x0f BEGIN // bows
          WRITE_SHORT 0x86  (item_ench)  
          WRITE_SHORT 0x8c  (item_ench+str_dmg+is_long_heavy)  // dmg bonus = enchantment level + str bonus up to req + (1 for long bow)
        END ELSE BEGIN // xbows
          WRITE_SHORT 0x86  (item_ench+1)  // to hit bonus = enchantment level + 1
          WRITE_SHORT 0x8c  (item_ench+str_dmg+is_long_heavy*2)  // dmg bonus = enchantment level + str bonus up to req + (2 for heavy xbow)
        END
      END
    END
  END
BUT_ONLY


// adjust bonus for unique items per 2DA

COPY - ~mcr_salt_and_pepper/2da/launcher_ammo_mod.2da~ ~mcr_salt_and_pepper/components~
  READ_2DA_ENTRIES_NOW ~itemmod~ 6
  FOR (row = 0; row < itemmod; ++row) BEGIN
    READ_2DA_ENTRY_FORMER itemmod row 0  id
    READ_2DA_ENTRY_FORMER itemmod row 1  ir_type
    READ_2DA_ENTRY_FORMER itemmod row 2  itm_id
    READ_2DA_ENTRY_FORMER itemmod row 3  mod_tohit
    READ_2DA_ENTRY_FORMER itemmod row 4  mod_dmg
    READ_2DA_ENTRY_FORMER itemmod row 5  mod_ench
    
    
    INNER_ACTION BEGIN
      ACTION_IF FILE_EXISTS_IN_GAME ~%itm_id%.itm~ BEGIN
        COPY_EXISTING ~%itm_id%.itm~ ~override~
          READ_LONG  0x60 item_ench
          READ_SHORT 0x86 tohit_bonus
          READ_SHORT 0x8c dmg_bonus
          WRITE_LONG  0x60 (item_ench + mod_ench)
          WRITE_SHORT 0x86 (tohit_bonus + mod_tohit)
          WRITE_SHORT 0x8c (dmg_bonus + mod_dmg)
        BUT_ONLY
      END
    END
  END

// restore kobold commando fire arrow's bonus ability

COPY_EXISTING ~arow08.itm~ ~override/arowkc.itm~
	WRITE_LONG 0x18 0x68 // undroppable
	READ_LONG 0x60 enchantment
	WRITE_SHORT 0x8c enchantment // restore damage bonus
	WRITE_SHORT 0x86 enchantment // restore to hit bonus
BUT_ONLY

///////////////////////
// update description
///////////////////////

// stolen from BG2 Tweak Pack at G3 and modified to take parameter ~%text_update%~, the macro name of the REPLACE_TEXTUALLY to execute
DEFINE_PATCH_MACRO ~update_item_descriptions~ BEGIN
  ident=1
  FOR (index = 0x54 ; index >= 0x50 ; index -= 4) BEGIN // loop through descriptions
    READ_LONG "%index%" "valid"
    PATCH_IF ("%valid%" < 2147483646) AND ("%valid%" >= 0) BEGIN // verify description is valid
      READ_STRREF "%index%" "description"
      INNER_PATCH_SAVE new_desc ~%description%~ BEGIN
        LAUNCH_PATCH_MACRO ~%text_update%~
      END
      SAY_EVALUATED "%index%" ~%new_desc%~
  //    PATCH_PRINT ~%new_desc%~
      ident -=1
    END
  END
END

DEFINE_PATCH_MACRO replacement_pair BEGIN
  // REPLACE_TEXTUALLY ~((THAC0:\s*\+\d*\s*bonus)|([Dd]amage:\s*\d*[Dd]*\d*(\+\d*)*(\s*bonus)*))~ ~__match__~
  REPLACE_TEXTUALLY CASE_INSENSITIVE ~THAC0:[ %tab%]*\+[0-9]*[ %tab%]*bonus~ ~__match__~
  REPLACE_TEXTUALLY CASE_INSENSITIVE ~Damage:[ %tab%]*\([0-9]*D[0-9]*\)?\([ %tab%]*\+[ %tab%]*[0-9]*\)?\([ %tab%]*bonus\)?~ ~__match__~
  REPLACE_TEXTUALLY CASE_INSENSITIVE ~__match__%LNL%__match__~ ~__match__~
  REPLACE_TEXTUALLY ~__match__~ ~%desc_tohit_bonus%%desc_newline%%desc_damage%~
END

COPY_EXISTING_REGEXP GLOB ~.*\.itm$~ ~override~
  READ_SHORT 0x1c item_type
  READ_LONG  0x60 item_ench
  PATCH_IF (%SOURCE_SIZE% > 0x71) BEGIN
    PATCH_IF (item_type = 0x0f || item_type = 0x12 || item_type = 0x1b || item_type = 0x05 OR item_type = 0x0e OR item_type = 0x1f) BEGIN // double-check those values
		READ_SHORT 0x8c damage_bonus
		READ_SHORT 0x86 thac0_bonus
		READ_SHORT 0x88 die_size
		READ_SHORT 0x8a n_dies
		SET n_desc = 0
		// to hit bonus description
		PATCH_IF thac0_bonus > 0 BEGIN
			SPRINT desc_tohit_bonus ~THAC0: +%thac0_bonus% bonus~
			SET n_desc += 1
		END ELSE PATCH_IF thac0_bonus = 0 BEGIN
			SPRINT desc_tohit_bonus ~~
		END ELSE BEGIN
			SPRINT desc_tohit_bonus ~THAC0: %thac0_bonus% penalty~
			SET n_desc += 1
		END
		
		// damage description
		PATCH_IF n_dies = 0 BEGIN
			PATCH_IF damage_bonus >= 0 BEGIN
				SPRINT desc_damage ~Damage: +%damage_bonus% bonus~
				SET n_desc += 1
			END ELSE PATCH_IF damage_bonus = 0 BEGIN
				SPRINT desc_damage ~~
			END ELSE BEGIN
				SPRINT desc_damage ~Damage: %damage_bonus% penalty~
				SET n_desc += 1
			END
		END ELSE BEGIN
			SET n_desc += 1
			PATCH_IF damage_bonus > 0 BEGIN
				SPRINT desc_damage ~Damage: %n_dies%D%die_size%+%damage_bonus% bonus~
			END ELSE BEGIN
				SPRINT desc_damage ~Damage: %n_dies%D%die_size%~
			END
		END
		
		PATCH_IF n_desc = 2 BEGIN
			SPRINT desc_newline ~%LNL%~
		END ELSE BEGIN
			SPRINT desc_newline ~~
		END
		
		SPRINT text_update replacement_pair
		LPM update_item_descriptions
	END
  END
BUT_ONLY